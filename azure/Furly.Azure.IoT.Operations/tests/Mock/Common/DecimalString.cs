// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.10.0.0; DO NOT EDIT. */

namespace Azure.IoT.Operations.Mock
{
    using System;
    using System.Globalization;
    using System.Text.RegularExpressions;

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
    internal sealed class DecimalString
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
    {
        private static readonly Regex ValidationRegex = new Regex("^(?:\\+|-)?(?:[1-9][0-9]*|0)(?:\\.[0-9]*)?$", RegexOptions.Compiled);

        private readonly string value;

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
        public DecimalString()
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
            : this("0", skipValidation: false)
        {
        }

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
        public DecimalString(string value)
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
            : this(value, skipValidation: false)
        {
        }

        private DecimalString(string value, bool skipValidation)
        {
            if (!skipValidation && !ValidationRegex.IsMatch(value))
            {
                throw new ArgumentException($"string {value} is not a valid decimal value");
            }

            this.value = value;
        }

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
        public static implicit operator string(DecimalString decimalString) => decimalString.value;
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
        public static explicit operator DecimalString(string stringVal) => new DecimalString(stringVal);
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
        public static implicit operator double(DecimalString decimalString) => double.TryParse(decimalString.value, out double doubleVal) ? doubleVal : double.NaN;
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
        public static explicit operator DecimalString(double doubleVal) => new DecimalString(doubleVal.ToString("F", CultureInfo.InvariantCulture));
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
        public static bool operator !=(DecimalString? x, DecimalString? y)
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
        {
            if (ReferenceEquals(null, x))
            {
                return !ReferenceEquals(null, y);
            }

            return !x.Equals(y);
        }

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
        public static bool operator ==(DecimalString? x, DecimalString? y)
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
        {
            if (ReferenceEquals(null, x))
            {
                return ReferenceEquals(null, y);
            }

            return x.Equals(y);
        }

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
        public static bool TryParse(string value, out DecimalString? decimalString)
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
        {
            if (ValidationRegex.IsMatch(value))
            {
                decimalString = new DecimalString(value, skipValidation: true);
                return true;
            }
            else
            {
                decimalString = null;
                return false;
            }
        }

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
        public bool Equals(DecimalString? other)
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
        {
            return other?.value == this.value;
        }

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
        public override bool Equals(object? obj)
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
        {
            return obj is DecimalString other && Equals(other);
        }

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
        public override int GetHashCode()
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
        {
            return value.GetHashCode();
        }

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
        public override string ToString() => value;
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
    }
}
