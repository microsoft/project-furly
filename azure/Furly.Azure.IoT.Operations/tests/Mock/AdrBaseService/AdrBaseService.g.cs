/* Code generated by Azure.Iot.Operations.ProtocolCompiler v0.10.0.0; DO NOT EDIT. */

#nullable enable

namespace Azure.IoT.Operations.Mock.AdrBaseService
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;
    using Azure.Iot.Operations.Protocol.Models;
    using Azure.Iot.Operations.Protocol;
    using Azure.Iot.Operations.Protocol.RPC;
    using Azure.Iot.Operations.Protocol.Telemetry;
    using Azure.IoT.Operations.Mock;

    [CommandTopic("akri/connector/resources/{ex:connectorClientId}/{ex:deviceName}/{ex:inboundEndpointName}/{commandName}")]
    [TelemetryTopic("akri/connector/resources/telemetry/{ex:connectorClientId}/{ex:deviceName}/{ex:inboundEndpointName}/{telemetryName}")]
    [System.CodeDom.Compiler.GeneratedCode("Azure.Iot.Operations.ProtocolCompiler", "0.10.0.0")]
    public static partial class AdrBaseService
    {
        public abstract partial class Service : IAsyncDisposable
        {
            private ApplicationContext applicationContext;
            private IMqttPubSubClient mqttClient;
            private readonly GetDeviceCommandExecutor getDeviceCommandExecutor;
            private readonly GetDeviceStatusCommandExecutor getDeviceStatusCommandExecutor;
            private readonly GetAssetCommandExecutor getAssetCommandExecutor;
            private readonly GetAssetStatusCommandExecutor getAssetStatusCommandExecutor;
            private readonly UpdateDeviceStatusCommandExecutor updateDeviceStatusCommandExecutor;
            private readonly UpdateAssetStatusCommandExecutor updateAssetStatusCommandExecutor;
            private readonly SetNotificationPreferenceForDeviceUpdatesCommandExecutor setNotificationPreferenceForDeviceUpdatesCommandExecutor;
            private readonly SetNotificationPreferenceForAssetUpdatesCommandExecutor setNotificationPreferenceForAssetUpdatesCommandExecutor;
            private readonly CreateOrUpdateDiscoveredAssetCommandExecutor createOrUpdateDiscoveredAssetCommandExecutor;
            private readonly DeviceUpdateEventTelemetrySender deviceUpdateEventTelemetrySender;
            private readonly AssetUpdateEventTelemetrySender assetUpdateEventTelemetrySender;

            /// <summary>
            /// Construct a new instance of this service.
            /// </summary>
            /// <param name="applicationContext">The shared context for your application.</param>
            /// <param name="mqttClient">The MQTT client to use.</param>
            /// <param name="topicTokenMap">
            /// The topic token replacement map to use for all operations by default. Generally, this will include the token values
            /// for topic tokens such as "modelId" which should be the same for the duration of this service's lifetime. Note that
            /// additional topic tokens can be specified per-telemetry message.
            /// </param>
            public Service(ApplicationContext applicationContext, IMqttPubSubClient mqttClient, Dictionary<string, string>? topicTokenMap = null)
            {
                this.applicationContext = applicationContext;
                this.mqttClient = mqttClient;

                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before invoking command.");
                }

                this.getDeviceCommandExecutor = new GetDeviceCommandExecutor(applicationContext, mqttClient) { OnCommandReceived = GetDeviceInt };
                this.getDeviceStatusCommandExecutor = new GetDeviceStatusCommandExecutor(applicationContext, mqttClient) { OnCommandReceived = GetDeviceStatusInt };
                this.getAssetCommandExecutor = new GetAssetCommandExecutor(applicationContext, mqttClient) { OnCommandReceived = GetAssetInt };
                this.getAssetStatusCommandExecutor = new GetAssetStatusCommandExecutor(applicationContext, mqttClient) { OnCommandReceived = GetAssetStatusInt };
                this.updateDeviceStatusCommandExecutor = new UpdateDeviceStatusCommandExecutor(applicationContext, mqttClient) { OnCommandReceived = UpdateDeviceStatusInt };
                this.updateAssetStatusCommandExecutor = new UpdateAssetStatusCommandExecutor(applicationContext, mqttClient) { OnCommandReceived = UpdateAssetStatusInt };
                this.setNotificationPreferenceForDeviceUpdatesCommandExecutor = new SetNotificationPreferenceForDeviceUpdatesCommandExecutor(applicationContext, mqttClient) { OnCommandReceived = SetNotificationPreferenceForDeviceUpdatesInt };
                this.setNotificationPreferenceForAssetUpdatesCommandExecutor = new SetNotificationPreferenceForAssetUpdatesCommandExecutor(applicationContext, mqttClient) { OnCommandReceived = SetNotificationPreferenceForAssetUpdatesInt };
                this.createOrUpdateDiscoveredAssetCommandExecutor = new CreateOrUpdateDiscoveredAssetCommandExecutor(applicationContext, mqttClient) { OnCommandReceived = CreateOrUpdateDiscoveredAssetInt };
                this.deviceUpdateEventTelemetrySender = new DeviceUpdateEventTelemetrySender(applicationContext, mqttClient);
                this.assetUpdateEventTelemetrySender = new AssetUpdateEventTelemetrySender(applicationContext, mqttClient);

                if (topicTokenMap != null)
                {
                    foreach (string topicTokenKey in topicTokenMap.Keys)
                    {
                        this.getDeviceCommandExecutor.TopicTokenMap.TryAdd("ex:" + topicTokenKey, topicTokenMap[topicTokenKey]);
                        this.getDeviceStatusCommandExecutor.TopicTokenMap.TryAdd("ex:" + topicTokenKey, topicTokenMap[topicTokenKey]);
                        this.getAssetCommandExecutor.TopicTokenMap.TryAdd("ex:" + topicTokenKey, topicTokenMap[topicTokenKey]);
                        this.getAssetStatusCommandExecutor.TopicTokenMap.TryAdd("ex:" + topicTokenKey, topicTokenMap[topicTokenKey]);
                        this.updateDeviceStatusCommandExecutor.TopicTokenMap.TryAdd("ex:" + topicTokenKey, topicTokenMap[topicTokenKey]);
                        this.updateAssetStatusCommandExecutor.TopicTokenMap.TryAdd("ex:" + topicTokenKey, topicTokenMap[topicTokenKey]);
                        this.setNotificationPreferenceForDeviceUpdatesCommandExecutor.TopicTokenMap.TryAdd("ex:" + topicTokenKey, topicTokenMap[topicTokenKey]);
                        this.setNotificationPreferenceForAssetUpdatesCommandExecutor.TopicTokenMap.TryAdd("ex:" + topicTokenKey, topicTokenMap[topicTokenKey]);
                        this.createOrUpdateDiscoveredAssetCommandExecutor.TopicTokenMap.TryAdd("ex:" + topicTokenKey, topicTokenMap[topicTokenKey]);
                        this.deviceUpdateEventTelemetrySender.TopicTokenMap.TryAdd("ex:" + topicTokenKey, topicTokenMap[topicTokenKey]);
                        this.assetUpdateEventTelemetrySender.TopicTokenMap.TryAdd("ex:" + topicTokenKey, topicTokenMap[topicTokenKey]);
                    }
                }

                this.getDeviceCommandExecutor.TopicTokenMap.TryAdd("executorId", clientId);
                this.getDeviceStatusCommandExecutor.TopicTokenMap.TryAdd("executorId", clientId);
                this.getAssetCommandExecutor.TopicTokenMap.TryAdd("executorId", clientId);
                this.getAssetStatusCommandExecutor.TopicTokenMap.TryAdd("executorId", clientId);
                this.updateDeviceStatusCommandExecutor.TopicTokenMap.TryAdd("executorId", clientId);
                this.updateAssetStatusCommandExecutor.TopicTokenMap.TryAdd("executorId", clientId);
                this.setNotificationPreferenceForDeviceUpdatesCommandExecutor.TopicTokenMap.TryAdd("executorId", clientId);
                this.setNotificationPreferenceForAssetUpdatesCommandExecutor.TopicTokenMap.TryAdd("executorId", clientId);
                this.createOrUpdateDiscoveredAssetCommandExecutor.TopicTokenMap.TryAdd("executorId", clientId);
            }

            public GetDeviceCommandExecutor GetDeviceCommandExecutor { get => this.getDeviceCommandExecutor; }

            public GetDeviceStatusCommandExecutor GetDeviceStatusCommandExecutor { get => this.getDeviceStatusCommandExecutor; }

            public GetAssetCommandExecutor GetAssetCommandExecutor { get => this.getAssetCommandExecutor; }

            public GetAssetStatusCommandExecutor GetAssetStatusCommandExecutor { get => this.getAssetStatusCommandExecutor; }

            public UpdateDeviceStatusCommandExecutor UpdateDeviceStatusCommandExecutor { get => this.updateDeviceStatusCommandExecutor; }

            public UpdateAssetStatusCommandExecutor UpdateAssetStatusCommandExecutor { get => this.updateAssetStatusCommandExecutor; }

            public SetNotificationPreferenceForDeviceUpdatesCommandExecutor SetNotificationPreferenceForDeviceUpdatesCommandExecutor { get => this.setNotificationPreferenceForDeviceUpdatesCommandExecutor; }

            public SetNotificationPreferenceForAssetUpdatesCommandExecutor SetNotificationPreferenceForAssetUpdatesCommandExecutor { get => this.setNotificationPreferenceForAssetUpdatesCommandExecutor; }

            public CreateOrUpdateDiscoveredAssetCommandExecutor CreateOrUpdateDiscoveredAssetCommandExecutor { get => this.createOrUpdateDiscoveredAssetCommandExecutor; }

            public DeviceUpdateEventTelemetrySender DeviceUpdateEventTelemetrySender { get => this.deviceUpdateEventTelemetrySender; }

            public AssetUpdateEventTelemetrySender AssetUpdateEventTelemetrySender { get => this.assetUpdateEventTelemetrySender; }

            public abstract Task<ExtendedResponse<GetDeviceResponsePayload>> GetDeviceAsync(CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<ExtendedResponse<GetDeviceStatusResponsePayload>> GetDeviceStatusAsync(CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<ExtendedResponse<GetAssetResponsePayload>> GetAssetAsync(GetAssetRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<ExtendedResponse<GetAssetStatusResponsePayload>> GetAssetStatusAsync(GetAssetStatusRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<ExtendedResponse<UpdateDeviceStatusResponsePayload>> UpdateDeviceStatusAsync(UpdateDeviceStatusRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<ExtendedResponse<UpdateAssetStatusResponsePayload>> UpdateAssetStatusAsync(UpdateAssetStatusRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<ExtendedResponse<SetNotificationPreferenceForDeviceUpdatesResponsePayload>> SetNotificationPreferenceForDeviceUpdatesAsync(SetNotificationPreferenceForDeviceUpdatesRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<ExtendedResponse<SetNotificationPreferenceForAssetUpdatesResponsePayload>> SetNotificationPreferenceForAssetUpdatesAsync(SetNotificationPreferenceForAssetUpdatesRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            public abstract Task<ExtendedResponse<CreateOrUpdateDiscoveredAssetResponsePayload>> CreateOrUpdateDiscoveredAssetAsync(CreateOrUpdateDiscoveredAssetRequestPayload request, CommandRequestMetadata requestMetadata, CancellationToken cancellationToken);

            /// <summary>
            /// Send telemetry.
            /// </summary>
            /// <param name="telemetry">The payload of the telemetry.</param>
            /// <param name="metadata">The metadata of the telemetry.</param>
            /// <param name="additionalTopicTokenMap">
            /// The topic token replacement map to use in addition to the topic token map provided in the constructor. If this map
            /// contains any keys that topic token map provided in the constructor also has, then values specified in this map will take precedence.
            /// </param>
            /// <param name="qos">The quality of service to send the telemetry with.</param>
            /// <param name="telemetryTimeout">How long the telemetry message will be available on the broker for a receiver to receive.</param>
            /// <param name="cancellationToken">Cancellation token.</param>
            public async Task SendTelemetryAsync(DeviceUpdateEventTelemetry telemetry, OutgoingTelemetryMetadata metadata, Dictionary<string, string>? additionalTopicTokenMap = null, MqttQualityOfServiceLevel qos = MqttQualityOfServiceLevel.AtLeastOnce, TimeSpan? telemetryTimeout = null, CancellationToken cancellationToken = default)
            {
                additionalTopicTokenMap ??= new();

                Dictionary<string, string> prefixedAdditionalTopicTokenMap = new();
                foreach (string key in additionalTopicTokenMap.Keys)
                {
                    prefixedAdditionalTopicTokenMap["ex:" + key] = additionalTopicTokenMap[key];
                }
                await this.deviceUpdateEventTelemetrySender.SendTelemetryAsync(telemetry, metadata, prefixedAdditionalTopicTokenMap, qos, telemetryTimeout, cancellationToken);
            }

            /// <summary>
            /// Send telemetry.
            /// </summary>
            /// <param name="telemetry">The payload of the telemetry.</param>
            /// <param name="metadata">The metadata of the telemetry.</param>
            /// <param name="additionalTopicTokenMap">
            /// The topic token replacement map to use in addition to the topic token map provided in the constructor. If this map
            /// contains any keys that topic token map provided in the constructor also has, then values specified in this map will take precedence.
            /// </param>
            /// <param name="qos">The quality of service to send the telemetry with.</param>
            /// <param name="telemetryTimeout">How long the telemetry message will be available on the broker for a receiver to receive.</param>
            /// <param name="cancellationToken">Cancellation token.</param>
            public async Task SendTelemetryAsync(AssetUpdateEventTelemetry telemetry, OutgoingTelemetryMetadata metadata, Dictionary<string, string>? additionalTopicTokenMap = null, MqttQualityOfServiceLevel qos = MqttQualityOfServiceLevel.AtLeastOnce, TimeSpan? telemetryTimeout = null, CancellationToken cancellationToken = default)
            {
                additionalTopicTokenMap ??= new();

                Dictionary<string, string> prefixedAdditionalTopicTokenMap = new();
                foreach (string key in additionalTopicTokenMap.Keys)
                {
                    prefixedAdditionalTopicTokenMap["ex:" + key] = additionalTopicTokenMap[key];
                }
                await this.assetUpdateEventTelemetrySender.SendTelemetryAsync(telemetry, metadata, prefixedAdditionalTopicTokenMap, qos, telemetryTimeout, cancellationToken);
            }

            /// <summary>
            /// Begin accepting command invocations for all command executors.
            /// </summary>
            /// <param name="preferredDispatchConcurrency">The dispatch concurrency count for the command response cache to use.</param>
            /// <param name="cancellationToken">Cancellation token.</param>
            public async Task StartAsync(int? preferredDispatchConcurrency = null, CancellationToken cancellationToken = default)
            {
                string? clientId = this.mqttClient.ClientId;
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new InvalidOperationException("No MQTT client Id configured. Must connect to MQTT broker before starting service.");
                }

                await Task.WhenAll(
                    this.getDeviceCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.getDeviceStatusCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.getAssetCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.getAssetStatusCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.updateDeviceStatusCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.updateAssetStatusCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.setNotificationPreferenceForDeviceUpdatesCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.setNotificationPreferenceForAssetUpdatesCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken),
                    this.createOrUpdateDiscoveredAssetCommandExecutor.StartAsync(preferredDispatchConcurrency, cancellationToken)).ConfigureAwait(false);
            }

            public async Task StopAsync(CancellationToken cancellationToken = default)
            {
                await Task.WhenAll(
                    this.getDeviceCommandExecutor.StopAsync(cancellationToken),
                    this.getDeviceStatusCommandExecutor.StopAsync(cancellationToken),
                    this.getAssetCommandExecutor.StopAsync(cancellationToken),
                    this.getAssetStatusCommandExecutor.StopAsync(cancellationToken),
                    this.updateDeviceStatusCommandExecutor.StopAsync(cancellationToken),
                    this.updateAssetStatusCommandExecutor.StopAsync(cancellationToken),
                    this.setNotificationPreferenceForDeviceUpdatesCommandExecutor.StopAsync(cancellationToken),
                    this.setNotificationPreferenceForAssetUpdatesCommandExecutor.StopAsync(cancellationToken),
                    this.createOrUpdateDiscoveredAssetCommandExecutor.StopAsync(cancellationToken)).ConfigureAwait(false);
            }

            private async Task<ExtendedResponse<GetDeviceResponseSchema>> GetDeviceInt(ExtendedRequest<EmptyJson> req, CancellationToken cancellationToken)
            {
                try
                {
                    ExtendedResponse<GetDeviceResponsePayload> extended = await this.GetDeviceAsync(req.RequestMetadata!, cancellationToken);

                    return new ExtendedResponse<GetDeviceResponseSchema>
                    {
                        Response = new GetDeviceResponseSchema { Device = extended.Response.Device },
                        ResponseMetadata = extended.ResponseMetadata,
                    };
                }
                catch (AkriServiceErrorException intEx)
                {
                    return ExtendedResponse<GetDeviceResponseSchema>.CreateFromResponse(new GetDeviceResponseSchema { GetDeviceError = intEx.AkriServiceError });
                }
            }

            private async Task<ExtendedResponse<GetDeviceStatusResponseSchema>> GetDeviceStatusInt(ExtendedRequest<EmptyJson> req, CancellationToken cancellationToken)
            {
                try
                {
                    ExtendedResponse<GetDeviceStatusResponsePayload> extended = await this.GetDeviceStatusAsync(req.RequestMetadata!, cancellationToken);

                    return new ExtendedResponse<GetDeviceStatusResponseSchema>
                    {
                        Response = new GetDeviceStatusResponseSchema { DeviceStatus = extended.Response.DeviceStatus },
                        ResponseMetadata = extended.ResponseMetadata,
                    };
                }
                catch (AkriServiceErrorException intEx)
                {
                    return ExtendedResponse<GetDeviceStatusResponseSchema>.CreateFromResponse(new GetDeviceStatusResponseSchema { GetDeviceStatusError = intEx.AkriServiceError });
                }
            }

            private async Task<ExtendedResponse<GetAssetResponseSchema>> GetAssetInt(ExtendedRequest<GetAssetRequestPayload> req, CancellationToken cancellationToken)
            {
                try
                {
                    ExtendedResponse<GetAssetResponsePayload> extended = await this.GetAssetAsync(req.Request!, req.RequestMetadata!, cancellationToken);

                    return new ExtendedResponse<GetAssetResponseSchema>
                    {
                        Response = new GetAssetResponseSchema { Asset = extended.Response.Asset },
                        ResponseMetadata = extended.ResponseMetadata,
                    };
                }
                catch (AkriServiceErrorException intEx)
                {
                    return ExtendedResponse<GetAssetResponseSchema>.CreateFromResponse(new GetAssetResponseSchema { GetAssetError = intEx.AkriServiceError });
                }
            }

            private async Task<ExtendedResponse<GetAssetStatusResponseSchema>> GetAssetStatusInt(ExtendedRequest<GetAssetStatusRequestPayload> req, CancellationToken cancellationToken)
            {
                try
                {
                    ExtendedResponse<GetAssetStatusResponsePayload> extended = await this.GetAssetStatusAsync(req.Request!, req.RequestMetadata!, cancellationToken);

                    return new ExtendedResponse<GetAssetStatusResponseSchema>
                    {
                        Response = new GetAssetStatusResponseSchema { AssetStatus = extended.Response.AssetStatus },
                        ResponseMetadata = extended.ResponseMetadata,
                    };
                }
                catch (AkriServiceErrorException intEx)
                {
                    return ExtendedResponse<GetAssetStatusResponseSchema>.CreateFromResponse(new GetAssetStatusResponseSchema { GetAssetStatusError = intEx.AkriServiceError });
                }
            }

            private async Task<ExtendedResponse<UpdateDeviceStatusResponseSchema>> UpdateDeviceStatusInt(ExtendedRequest<UpdateDeviceStatusRequestPayload> req, CancellationToken cancellationToken)
            {
                try
                {
                    ExtendedResponse<UpdateDeviceStatusResponsePayload> extended = await this.UpdateDeviceStatusAsync(req.Request!, req.RequestMetadata!, cancellationToken);

                    return new ExtendedResponse<UpdateDeviceStatusResponseSchema>
                    {
                        Response = new UpdateDeviceStatusResponseSchema { UpdatedDeviceStatus = extended.Response.UpdatedDeviceStatus },
                        ResponseMetadata = extended.ResponseMetadata,
                    };
                }
                catch (AkriServiceErrorException intEx)
                {
                    return ExtendedResponse<UpdateDeviceStatusResponseSchema>.CreateFromResponse(new UpdateDeviceStatusResponseSchema { UpdateDeviceStatusError = intEx.AkriServiceError });
                }
            }

            private async Task<ExtendedResponse<UpdateAssetStatusResponseSchema>> UpdateAssetStatusInt(ExtendedRequest<UpdateAssetStatusRequestPayload> req, CancellationToken cancellationToken)
            {
                try
                {
                    ExtendedResponse<UpdateAssetStatusResponsePayload> extended = await this.UpdateAssetStatusAsync(req.Request!, req.RequestMetadata!, cancellationToken);

                    return new ExtendedResponse<UpdateAssetStatusResponseSchema>
                    {
                        Response = new UpdateAssetStatusResponseSchema { UpdatedAssetStatus = extended.Response.UpdatedAssetStatus },
                        ResponseMetadata = extended.ResponseMetadata,
                    };
                }
                catch (AkriServiceErrorException intEx)
                {
                    return ExtendedResponse<UpdateAssetStatusResponseSchema>.CreateFromResponse(new UpdateAssetStatusResponseSchema { UpdateAssetStatusError = intEx.AkriServiceError });
                }
            }

            private async Task<ExtendedResponse<SetNotificationPreferenceForDeviceUpdatesResponseSchema>> SetNotificationPreferenceForDeviceUpdatesInt(ExtendedRequest<SetNotificationPreferenceForDeviceUpdatesRequestPayload> req, CancellationToken cancellationToken)
            {
                try
                {
                    ExtendedResponse<SetNotificationPreferenceForDeviceUpdatesResponsePayload> extended = await this.SetNotificationPreferenceForDeviceUpdatesAsync(req.Request!, req.RequestMetadata!, cancellationToken);

                    return new ExtendedResponse<SetNotificationPreferenceForDeviceUpdatesResponseSchema>
                    {
                        Response = new SetNotificationPreferenceForDeviceUpdatesResponseSchema { ResponsePayload = extended.Response.ResponsePayload },
                        ResponseMetadata = extended.ResponseMetadata,
                    };
                }
                catch (AkriServiceErrorException intEx)
                {
                    return ExtendedResponse<SetNotificationPreferenceForDeviceUpdatesResponseSchema>.CreateFromResponse(new SetNotificationPreferenceForDeviceUpdatesResponseSchema { SetNotificationPreferenceForDeviceUpdatesError = intEx.AkriServiceError });
                }
            }

            private async Task<ExtendedResponse<SetNotificationPreferenceForAssetUpdatesResponseSchema>> SetNotificationPreferenceForAssetUpdatesInt(ExtendedRequest<SetNotificationPreferenceForAssetUpdatesRequestPayload> req, CancellationToken cancellationToken)
            {
                try
                {
                    ExtendedResponse<SetNotificationPreferenceForAssetUpdatesResponsePayload> extended = await this.SetNotificationPreferenceForAssetUpdatesAsync(req.Request!, req.RequestMetadata!, cancellationToken);

                    return new ExtendedResponse<SetNotificationPreferenceForAssetUpdatesResponseSchema>
                    {
                        Response = new SetNotificationPreferenceForAssetUpdatesResponseSchema { ResponsePayload = extended.Response.ResponsePayload },
                        ResponseMetadata = extended.ResponseMetadata,
                    };
                }
                catch (AkriServiceErrorException intEx)
                {
                    return ExtendedResponse<SetNotificationPreferenceForAssetUpdatesResponseSchema>.CreateFromResponse(new SetNotificationPreferenceForAssetUpdatesResponseSchema { SetNotificationPreferenceForAssetUpdatesError = intEx.AkriServiceError });
                }
            }

            private async Task<ExtendedResponse<CreateOrUpdateDiscoveredAssetResponseSchema>> CreateOrUpdateDiscoveredAssetInt(ExtendedRequest<CreateOrUpdateDiscoveredAssetRequestPayload> req, CancellationToken cancellationToken)
            {
                try
                {
                    ExtendedResponse<CreateOrUpdateDiscoveredAssetResponsePayload> extended = await this.CreateOrUpdateDiscoveredAssetAsync(req.Request!, req.RequestMetadata!, cancellationToken);

                    return new ExtendedResponse<CreateOrUpdateDiscoveredAssetResponseSchema>
                    {
                        Response = new CreateOrUpdateDiscoveredAssetResponseSchema { DiscoveredAssetResponse = extended.Response.DiscoveredAssetResponse },
                        ResponseMetadata = extended.ResponseMetadata,
                    };
                }
                catch (AkriServiceErrorException intEx)
                {
                    return ExtendedResponse<CreateOrUpdateDiscoveredAssetResponseSchema>.CreateFromResponse(new CreateOrUpdateDiscoveredAssetResponseSchema { CreateOrUpdateDiscoveredAssetError = intEx.AkriServiceError });
                }
            }

            public async ValueTask DisposeAsync()
            {
                await this.getDeviceCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.getDeviceStatusCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.getAssetCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.getAssetStatusCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.updateDeviceStatusCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.updateAssetStatusCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.setNotificationPreferenceForDeviceUpdatesCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.setNotificationPreferenceForAssetUpdatesCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.createOrUpdateDiscoveredAssetCommandExecutor.DisposeAsync().ConfigureAwait(false);
                await this.deviceUpdateEventTelemetrySender.DisposeAsync().ConfigureAwait(false);
                await this.assetUpdateEventTelemetrySender.DisposeAsync().ConfigureAwait(false);
            }

            public async ValueTask DisposeAsync(bool disposing)
            {
                await this.getDeviceCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getDeviceStatusCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getAssetCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.getAssetStatusCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.updateDeviceStatusCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.updateAssetStatusCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.setNotificationPreferenceForDeviceUpdatesCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.setNotificationPreferenceForAssetUpdatesCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.createOrUpdateDiscoveredAssetCommandExecutor.DisposeAsync(disposing).ConfigureAwait(false);
                await this.deviceUpdateEventTelemetrySender.DisposeAsync(disposing).ConfigureAwait(false);
                await this.assetUpdateEventTelemetrySender.DisposeAsync(disposing).ConfigureAwait(false);
            }
        }
    }
}
